---
name: Run CI Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'
  workflow_dispatch:  # Allows to trigger the workflow manually in GitHub UI

# If another push to the same PR or branch happens while this workflow is still running,
# cancel the earlier run in favor of the next run.
#
# There's no point in testing an outdated version of the code. GitHub only allows
# a limited number of job runners to be active at the same time, so it's better to cancel
# pointless jobs early so that more useful jobs can run sooner.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  POETRY_VERSION: "1.7.1"
  WORKDIR: "./backend"

jobs:
  lint:
    uses:
      ./.github/workflows/_lint.yml
    with:
      working-directory: ./backend
    secrets: inherit
  test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    services:
      postgres:
        # ensure postgres version this stays in sync with prod database
        # and with postgres version used in docker compose
        image: postgres:16
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: langchain_test
          # required
          POSTGRES_PASSWORD: langchain
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: langchain
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 5s
          --health-retries 10
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    name: Python ${{ matrix.python-version }} tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: ${{ env.WORKDIR }}
          cache-key: langchain-extract-all
      - name: Test database connection
        run: |
          # Set up postgresql-client
          sudo apt-get install -y postgresql-client
          # Test psql connection
          psql -h localhost -p 5432 -U langchain -d langchain_test -c "SELECT 1;"
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: langchain

      - name: Install dependencies
        shell: bash
        run: |
          echo "Running tests, installing dependencies with poetry..."
          poetry install --with test,lint,typing,docs

      - name: Run tests
        run: make test

      - name: Ensure the tests did not create any additional files
        shell: bash
        run: |
          set -eu

          STATUS="$(git status)"
          echo "$STATUS"

          # grep will exit non-zero if the target message isn't found,
          # and `set -e` above will cause the step to fail.
          echo "$STATUS" | grep 'nothing to commit, working tree clean'
